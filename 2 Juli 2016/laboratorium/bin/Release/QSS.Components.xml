<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QSS.Components</name>
    </assembly>
    <members>
        <member name="T:QSS.Components.Images.Color32">
            <summary>
            Struct that defines a 32 bpp colour.
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory.
            </remarks>
        </member>
        <member name="F:QSS.Components.Images.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:QSS.Components.Images.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:QSS.Components.Images.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:QSS.Components.Images.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:QSS.Components.Images.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:QSS.Components.Images.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="T:QSS.Components.Base32Convert">
            <summary>
            Converts string data to and from base 32 format.
            </summary>
        </member>
        <member name="M:QSS.Components.Base32Convert.ToBase32String(System.Byte[])">
            <summary>
            Converts the value of an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String"/> representation consisting of base 32 digits.
            </summary>
            <param name="bytes">An array of 8-bit unsigned integers.</param>
            <returns>The <see cref="T:System.String"/> representation, in base 32, of <see pref="bytes"/>.</returns>
        </member>
        <member name="M:QSS.Components.Base32Convert.FromBase32String(System.String)">
            <summary>
            Converts the specified <see cref="T:System.String"/> representation of a value consisting of base 32 digits to an equivalent array of 8-bit unsigned integers.
            </summary>
            <param name="text">A <see cref="T:System.String"/>.</param>
            <returns>An array of 8-bit unsigned integers equivalent to <see pref="text"/>.</returns>
        </member>
        <member name="T:QSS.Components.Encryption">
            <summary>
            Provides methods for encrypting and decrypting data. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:QSS.Components.Encryption.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string of text.
            </summary>
            <param name="text">The text to encrypt.</param>
            <param name="key">The encryption key to use.</param>
            <returns>The encrypted text as a System.String.</returns>
        </member>
        <member name="M:QSS.Components.Encryption.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a string of text.
            </summary>
            <param name="text">The text to decrypt.</param>
            <param name="key">The encryption key to use.</param>
            <returns>The decrypted text as a System.String.</returns>
        </member>
        <member name="M:QSS.Components.Encryption.Hash(System.String)">
            <summary>
            Hashes a string of text.
            </summary>
            <param name="text">The text to hash.</param>
            <returns>The hash.</returns>
        </member>
        <member name="T:QSS.Components.Images.ImageResizer">
            <summary>
            Provides methods to assist with resizing images.
            </summary>
        </member>
        <member name="M:QSS.Components.Images.ImageResizer.GetThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Resizes the specified image to within the specified dimensions, while maintaining the aspect ratio.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to resize.</param>
            <param name="maxWidth">The maximum height.</param>
            <param name="maxHeight">The maximum width.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> containing the resized image.</returns>
        </member>
        <member name="T:QSS.Components.Images.OctreeQuantizer">
            <summary>
            Quantizes using an Octree.
            </summary>
        </member>
        <member name="T:QSS.Components.Images.Quantizer">
            <summary>
            Quantizes an image.
            </summary>
        </member>
        <member name="M:QSS.Components.Images.Quantizer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QSS.Components.Images.Quantizer"/> class.
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:QSS.Components.Images.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:QSS.Components.Images.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:QSS.Components.Images.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:QSS.Components.Images.Quantizer.InitialQuantizePixel(QSS.Components.Images.Color32*)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:QSS.Components.Images.Quantizer.QuantizePixel(QSS.Components.Images.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:QSS.Components.Images.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:QSS.Components.Images.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.InitialQuantizePixel(QSS.Components.Images.Color32*)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.QuantizePixel(QSS.Components.Images.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:QSS.Components.Images.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.AddColor(QSS.Components.Images.Color32*)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.TrackPrevious(QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.GetPaletteIndex(QSS.Components.Images.Color32*)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="P:QSS.Components.Images.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:QSS.Components.Images.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="T:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,QSS.Components.Images.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode.AddColor(QSS.Components.Images.Color32*,System.Int32,System.Int32,QSS.Components.Images.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(QSS.Components.Images.Color32*,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode.Increment(QSS.Components.Images.Color32*)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="P:QSS.Components.Images.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="T:QSS.Components.Images.PaletteQuantizer">
            <summary>
            Quantizes using a specified palette.
            </summary>
        </member>
        <member name="M:QSS.Components.Images.PaletteQuantizer.#ctor(System.Collections.ArrayList)">
            <summary>
            Construct the palette quantizer
            </summary>
            <param name="palette">The color palette to quantize to</param>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:QSS.Components.Images.PaletteQuantizer.QuantizePixel(QSS.Components.Images.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:QSS.Components.Images.PaletteQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image.
            </summary>
            <param name="original">Any old palette, this is overrwritten.</param>
            <returns>The new color palette.</returns>
        </member>
        <member name="F:QSS.Components.Images.PaletteQuantizer._colorMap">
            <summary>
            Lookup table for colors
            </summary>
        </member>
        <member name="F:QSS.Components.Images.PaletteQuantizer._colors">
            <summary>
            List of all colors in the palette
            </summary>
        </member>
        <member name="T:QSS.Components.NativeMethodHelpers">
            <summary>
            Provides functions to assist with native method calls.
            </summary>
        </member>
        <member name="M:QSS.Components.NativeMethodHelpers.Rgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an integer value representing an RGB color value from a set of red, green and blue color components.
            </summary>
            <param name="red">Integer in the range 0–255, inclusive, that represents the intensity of the red component of the color.</param>
            <param name="green">Integer in the range 0–255, inclusive, that represents the intensity of the green component of the color.</param>
            <param name="blue">Integer in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</param>
            <returns>An integer value representing an RGB color value from a set of red, green and blue color components.</returns>
        </member>
        <member name="M:QSS.Components.NativeMethodHelpers.MakeDWord(System.Int32,System.Int32)">
            <summary>
            Creates a DWORD value from the specified values.
            </summary>
            <param name="hiWord">The high-word value.</param>
            <param name="loWord">The low-word value.</param>
            <returns></returns>
        </member>
        <member name="T:QSS.Components.Validation">
            <summary>
            Provides methods for validating input data.
            </summary>
        </member>
        <member name="M:QSS.Components.Validation.IsInteger(System.String)">
            <summary>
            Returns a value indicating whether the specified string is an integer.
            </summary>
            <param name="text">The string to check.</param>
            <returns>A value indicating whether the specified string is a integer.</returns>
        </member>
        <member name="M:QSS.Components.Validation.IsDecimal(System.String)">
            <summary>
            Returns a value indicating whether the specified string is a decimal.
            </summary>
            <param name="text">The string to check.</param>
            <returns>A value indicating whether the specified string is a decimal.</returns>
        </member>
        <member name="T:QSS.Components.XmlHelpers">
            <summary>
            Provides methods for working with XML documents.
            </summary>
        </member>
        <member name="M:QSS.Components.XmlHelpers.XmlEscape(System.String)">
            <summary>
            Escapes characters which are invalid in XML in the specified string and returns the new string.
            </summary>
            <param name="text">The string to escape.</param>
            <returns>The new string with all characters escaped.</returns>
        </member>
    </members>
</doc>
